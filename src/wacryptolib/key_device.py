import win32api
import wmi
import win32con
from pathlib import Path
from wacryptolib.utilities import dump_to_json_file
from wacryptolib.utilities import generate_uuid0
import sys



def list_available_key_devices() -> list:
    """Returns a list of (key_device) dictionaries representing mounted partitions of USB keys (or other mobile storage devices).

    Each "key_device" entry has keys 
    "path" (str, mount point on filesystem), 
    "label" (str, possibly empty, label of the partition),
    "format" (str lowercase, like "ext2", "fat32" etc), 
    "size" (in bytes, of the partition), 
    and metadata (dict, or None if partition
    has no ".key_storage/.metadata.json" file at its root.
    For the format of metadata dict, see initialize_key_device() function.
    """
   
   
            
    usb_dev_list = []
    for drive in wmi.WMI().Win32_DiskDrive(): 
        pnp_dev_id = drive.PNPDeviceID.split('\\') 
        
        if (pnp_dev_id[0]=='USBSTOR'): # examples :'USBSTOR' for "USB key" # 
            usb_dev = {}
            usb_dev['Drive_type'] = pnp_dev_id[0]#type like 'USBSTOR' 
            for partition in drive.associators("Win32_DiskDriveToDiskPartition"): 
                for logical_disk in partition.associators("Win32_LogicalDiskToPartition"): 
                    if drive.Size != None: 
                        logical_address = logical_disk.Caption
                        # The path like : 'E:' 
                        usb_dev['path']  = logical_address
                        #'BOURICHI' or '' (!!empty) 
                        usb_dev['label'] = win32api.GetVolumeInformation(logical_disk.Caption + "\\")[0]
                        # Size like : 31000166400  
                        usb_dev['size'] = int(partition.Size) 
                        # Format like :'FAT32' 
                        usb_dev['format'] = str(logical_disk.FileSystem)
                        # check if there is a directory ".key_storage" in the key storage
                        if not Path(usb_dev['path']+"\.key_storage").exists():
                            initialize_key_device(usb_dev, 'akram')
                        usb_dev_list.append(usb_dev) 
                        
                    else: 
                        pass
    print(usb_dev_list)

                      
    
   


def initialize_key_device(key_device: dict, user: str):
    """
    Creates a HIDDEN (if possible, eg. at least on fat32/ntfs) ".key_storage/" folder in partition represented by "key_device",
    and .metadata.json file inside, which contains fields "uuid" (autogenerated uuid thanks to wacryptolib function) and "user" as passed as argument.
	
    A RuntimError is raised if key_device was already initialized.
    """
    if Path(key_device['path']).exists():
        hidden_folder =key_device['path']+"\.key_storage"
        hidden_file = hidden_folder + '\.metadata.json'
        try:
            if Path(hidden_folder).exists():
                raise RuntimeError("File metadata.json already exists")
            else:
                Path(hidden_folder).mkdir()
                Path(hidden_file).touch()
        except RuntimeError as err:
            print(err.args)
            print('key_device was already initialized', key_device['label'])
            raise
            
        metadata = {}
        #create like : {'uuid': UUID('0e7ee05d-07ad-75bc-c1f9-05db3e0680ca'), 'user': 'John Doe'}
        metadata['uuid']=generate_uuid0()
        metadata['user']= "John Doe"
        
        dump_to_json_file(hidden_file, metadata)
        win32api.SetFileAttributes(hidden_folder,win32con.FILE_ATTRIBUTE_HIDDEN)
        win32api.SetFileAttributes(hidden_file,win32con.FILE_ATTRIBUTE_HIDDEN)
        print(key_device['path']+" : metadata included in device ")
    else:
        print(key_device['path']+" : This path doesn't exist")


list_available_key_devices()
